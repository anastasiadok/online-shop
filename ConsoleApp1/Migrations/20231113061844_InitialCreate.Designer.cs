// <auto-generated />
using System;
using ConsoleApp1.db.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConsoleApp1.Migrations
{
    [DbContext(typeof(OnlineshopContext))]
    [Migration("20231113061844_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status_type", new[] { "in_review", "in_delivery", "completed", "cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_type", new[] { "admin", "user" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConsoleApp1.db.Models.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AddressId")
                        .HasName("adresses_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("BrandId")
                        .HasName("brands_pkey");

                    b.HasIndex(new[] { "Name" }, "brands_name_key")
                        .IsUnique();

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.CartItem", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_var_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("UserId", "ProductVariantId")
                        .HasName("pk_cart_item");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId")
                        .HasName("categories_pkey");

                    b.HasIndex("SectionId");

                    b.HasIndex(new[] { "Name", "SectionId" }, "categories_name_sections_key")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Color", b =>
                {
                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color_name");

                    b.HasKey("ColorId")
                        .HasName("colors_pkey");

                    b.HasIndex(new[] { "ColorName" }, "colors_color_name_key")
                        .IsUnique();

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Media", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("medium_id");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("bytes");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("file_type");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaId")
                        .HasName("media_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "FileType", "FileName" }, "media_file_type_file_name_key")
                        .IsUnique();

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_at");

                    b.Property<TransactionStatus>("Status")
                        .HasColumnType("status_type")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("total_price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("orders_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.OrderItem", b =>
                {
                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_var_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("ProductVariantId", "OrderId")
                        .HasName("pk_order_item");

                    b.HasIndex("OrderId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.OrderTransaction", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<TransactionStatus>("Status")
                        .HasColumnType("status_type")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("OrderId", "Status")
                        .HasName("pk_order_tr");

                    b.HasIndex(new[] { "OrderId", "Status" }, "by_order_status")
                        .IsUnique();

                    b.ToTable("order_transactions", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<float?>("AverageRating")
                        .HasColumnType("real")
                        .HasColumnName("average_rating");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("subcategory_id");

                    b.HasKey("ProductId")
                        .HasName("products_pkey");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex(new[] { "BrandId", "SubcategoryId" }, "prod_by_brand_subcategory");

                    b.HasIndex(new[] { "Name" }, "products_name_key")
                        .IsUnique();

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.ProductVariant", b =>
                {
                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("prod_variant_id");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("color_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("size_id");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("sku");

                    b.HasKey("ProductVariantId")
                        .HasName("product_variants_pkey");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.HasIndex(new[] { "Sku" }, "product_variants_sku_key")
                        .IsUnique();

                    b.ToTable("product_variants", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid")
                        .HasColumnName("review_id");

                    b.Property<string>("CommentText")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("comment_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("reviews_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ProductId", "Rating" }, "by_product_rating");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("SectionId")
                        .HasName("sections_pkey");

                    b.HasIndex(new[] { "Name" }, "sections_name_key")
                        .IsUnique();

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Size", b =>
                {
                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("size_id");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("size_name");

                    b.HasKey("SizeId")
                        .HasName("sizes_pkey");

                    b.HasIndex(new[] { "SizeName" }, "sizes_size_name_key")
                        .IsUnique();

                    b.ToTable("sizes", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Subcategory", b =>
                {
                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("subcategory_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("SubcategoryId")
                        .HasName("subcategories_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "Name", "CategoryId" }, "subcategories_name_categories_key")
                        .IsUnique();

                    b.ToTable("subcategories", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<UserType>("Role")
                        .HasColumnType("user_type")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email", "Phone" }, "users_emai_phone_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Address", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("adresses_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.CartItem", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.ProductVariant", "ProductVariant")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("cart_items_product_var_id_fkey");

                    b.HasOne("ConsoleApp1.db.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("cart_items_user_id_fkey");

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Category", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("section_categories_id_fkey");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Media", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Product", "Product")
                        .WithMany("Media")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("media_product_id_fkey");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Order", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("orders_adress_id_fkey");

                    b.HasOne("ConsoleApp1.db.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("orders_user_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.OrderItem", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("order_items_order_id_fkey");

                    b.HasOne("ConsoleApp1.db.Models.ProductVariant", "ProductVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("order_items_product_var_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.OrderTransaction", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("order_transactions_transaction_id_fkey");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Product", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("products_brand_id_fkey");

                    b.HasOne("ConsoleApp1.db.Models.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .IsRequired()
                        .HasConstraintName("products_subcategory_id_fkey");

                    b.Navigation("Brand");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.ProductVariant", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Color", "Color")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("product_variants_color_id_fkey");

                    b.HasOne("ConsoleApp1.db.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("product_variants_product_id_fkey");

                    b.HasOne("ConsoleApp1.db.Models.Size", "Size")
                        .WithMany("ProductVariants")
                        .HasForeignKey("SizeId")
                        .IsRequired()
                        .HasConstraintName("product_variants_size_id_fkey");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Review", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("reviews_product_id_fkey");

                    b.HasOne("ConsoleApp1.db.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("reviews_user_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Subcategory", b =>
                {
                    b.HasOne("ConsoleApp1.db.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("category_subcategories_id_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Color", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Product", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("ProductVariants");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.ProductVariant", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Size", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.Subcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ConsoleApp1.db.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
